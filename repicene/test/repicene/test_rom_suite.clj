(ns repicene.test-rom-suite
  (:require [clojure.test :refer :all]
            [repicene.schema :as s]
            [repicene.file-loader :as file-loader]
            [repicene.decoder :as decoder]
            [repicene.core :as repicene]
            [repicene.debug :as debug]
            [repicene.cpu :as cpu]
            [repicene.address-alias :as at]
            [clojure.spec :as spec]
            [clojure.core.async :refer [go <!! >! >!! chan alts!! timeout offer! thread]]))


;; Read roms/cpu_instrs/individual/01-special.gb

#_(do (require '[clojure.tools.namespace.repl :refer [refresh refresh-all]])
      (set! *assert* false)
      (refresh-all))

(defn halt-at-0xC7D2 [cpu val]
  (println "0xC7D2 rewritten at " (decoder/hex8 val))
  (decoder/set-word-at cpu 0xC7D2 0x76))

(defn record-serial [serial-buffer]
  (fn [cpu val]
    (print (char val)) (flush)
    (swap! serial-buffer str (char val))
    cpu))

(defn test-rom
  "At 0xC7D2 is an infinite loop : Jmp 0. This instruction is not hardcoded,
  it's generated by the rom. So I use a memory bp to override this infinite
  loop with a halt instruction"
  [path seconds]
  (let [serial-buffer (atom "")
        cpu           (-> (vec (take 0x8000 (file-loader/load-rom path)))
                          (repicene/new-cpu)
                          (decoder/pc 0x100)
                          (debug/set-w-breakpoint 0xC7D2 halt-at-0xC7D2)
                          (debug/set-w-breakpoint at/serial-transfer-data
                                                  (record-serial serial-buffer)))
        looping-cpu   (thread (repicene/cpu-loop cpu))
        cpu-or-nil    (first (alts!! [looping-cpu (timeout (* 1000 seconds))]))]
    (if (s/valid? cpu-or-nil)
      (is (= "01-special\n\n\nPassed\n" @serial-buffer))
      (do (println "Failure, killing the gameboy")
          (>!! (:debug-chan-rx cpu) :kill)
          (println "wait kill")
          (<!! looping-cpu)))
    (println "test finished")))

(def blank (-> (vec (take 0x8000 (repeat 0)))
               (repicene/new-cpu)
               (decoder/set-word-at 0x7FFF 0x76)))
(defn run [] (repicene/cpu-loop blank))

(deftest integration
  (testing "01-specials"
    (test-rom "roms/cpu_instrs/individual/01-special.gb" 10)
    #_(test-rom "roms/cpu_instrs/individual/03-op sp,hl.gb" 600)))
